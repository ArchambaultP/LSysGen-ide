/*
 * generated by Xtext 2.32.0
 */
package org.xtext.project.lsysgen.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.project.lsysgen.ide.contentassist.antlr.internal.InternalLSysGenParser;
import org.xtext.project.lsysgen.services.LSysGenGrammarAccess;

public class LSysGenParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(LSysGenGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, LSysGenGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getOrganAccess().getAlternatives(), "rule__Organ__Alternatives");
			builder.put(grammarAccess.getParameterAccess().getAlternatives(), "rule__Parameter__Alternatives");
			builder.put(grammarAccess.getCropAccess().getGroup(), "rule__Crop__Group__0");
			builder.put(grammarAccess.getLeavesAccess().getGroup(), "rule__Leaves__Group__0");
			builder.put(grammarAccess.getStemsAccess().getGroup(), "rule__Stems__Group__0");
			builder.put(grammarAccess.getFruitsAccess().getGroup(), "rule__Fruits__Group__0");
			builder.put(grammarAccess.getMaxAgeAccess().getGroup(), "rule__MaxAge__Group__0");
			builder.put(grammarAccess.getTriLobe_thAccess().getGroup(), "rule__TriLobe_th__Group__0");
			builder.put(grammarAccess.getSingleLobe_thAccess().getGroup(), "rule__SingleLobe_th__Group__0");
			builder.put(grammarAccess.getFloatValueAccess().getGroup(), "rule__FloatValue__Group__0");
			builder.put(grammarAccess.getCropAccess().getNameAssignment_0(), "rule__Crop__NameAssignment_0");
			builder.put(grammarAccess.getCropAccess().getOrgansAssignment_2(), "rule__Crop__OrgansAssignment_2");
			builder.put(grammarAccess.getCropAccess().getParametersAssignment_3(), "rule__Crop__ParametersAssignment_3");
			builder.put(grammarAccess.getLeavesAccess().getNameAssignment_1(), "rule__Leaves__NameAssignment_1");
			builder.put(grammarAccess.getLeavesAccess().getValueAssignment_3(), "rule__Leaves__ValueAssignment_3");
			builder.put(grammarAccess.getStemsAccess().getNameAssignment_1(), "rule__Stems__NameAssignment_1");
			builder.put(grammarAccess.getStemsAccess().getValueAssignment_3(), "rule__Stems__ValueAssignment_3");
			builder.put(grammarAccess.getFruitsAccess().getNameAssignment_1(), "rule__Fruits__NameAssignment_1");
			builder.put(grammarAccess.getFruitsAccess().getValueAssignment_3(), "rule__Fruits__ValueAssignment_3");
			builder.put(grammarAccess.getMaxAgeAccess().getNameAssignment_1(), "rule__MaxAge__NameAssignment_1");
			builder.put(grammarAccess.getMaxAgeAccess().getValueAssignment_3(), "rule__MaxAge__ValueAssignment_3");
			builder.put(grammarAccess.getTriLobe_thAccess().getNameAssignment_1(), "rule__TriLobe_th__NameAssignment_1");
			builder.put(grammarAccess.getTriLobe_thAccess().getValueAssignment_3(), "rule__TriLobe_th__ValueAssignment_3");
			builder.put(grammarAccess.getSingleLobe_thAccess().getNameAssignment_1(), "rule__SingleLobe_th__NameAssignment_1");
			builder.put(grammarAccess.getSingleLobe_thAccess().getValueAssignment_3(), "rule__SingleLobe_th__ValueAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private LSysGenGrammarAccess grammarAccess;

	@Override
	protected InternalLSysGenParser createParser() {
		InternalLSysGenParser result = new InternalLSysGenParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LSysGenGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LSysGenGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
